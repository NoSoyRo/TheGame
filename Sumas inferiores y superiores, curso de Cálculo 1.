import matplotlib.pyplot as plt
import matplotlib
import numpy as np
#la función es f(x)=x^2

n=10
m=10
a=-10
b=7

#partición del intervalo [a,b]

Delta_P=(b-a)/n
P_1=[np.round(a+(i*Delta_P),4) for i in np.arange(0,n+1,1)]

#minimo cada subintervalo

Delta_P_s = (P_1[1]-P_1[0])/m
P_1_s = [np.round(a+(i*Delta_P_s),4) for i in np.arange(0,(m*n)+1,1)]
Min = []
Max=[]

Lista_valuaciones = []


for i in P_1[1:]:
    F_valuada_en_cada_P_1_s=[]
    for k in P_1_s:
        if k <= i and (i)-Delta_P <= k:#aqui va la funcion
            F_valuada_en_cada_P_1_s.append([k,k**2])
        else:
            continue
    Lista_valuaciones.append(F_valuada_en_cada_P_1_s)

Minimo=[]
Maximo=[]
X_min=[]
X_max=[]
G=[]
for i in Lista_valuaciones:
    G_1=[]
    for k in i:
        G_1.append(k[1])
    G.append(G_1)
for i in G:
    c=min(i)
    Minimo.append(c)
    d=max(i)
    Maximo.append(d)
p=0
valores_x_min=[]
valores_x_max=[]
for i in Lista_valuaciones:
    for k in i:
        if Minimo[p] == k[1]:
            valores_x_min.append(k[0])
        elif Maximo[p] == k[1]:
            valores_x_max.append(k[0])
    p+=1
   
##print(valores_x_min, valores_x_max)
    

#gráfica

##Ceros
Cero=[]
for i in range(len(valores_x_min)):
    Cero.append(0)
print(len(Cero),len(valores_x_min))
X=np.arange(a,b,0.01)
#aqui va de nuevo la funcion
Y=[i**2 for i in X]
#limites
#plt.xlim(a,b)
#plt.ylim(0,1)
fig, (A,B) = plt.subplots(1,2)

A.scatter(valores_x_min, Cero,c='red',marker='.')
B.scatter(valores_x_max, Cero,c='green',marker='.')
A.plot(X,Y)
B.plot(X,Y)

A.axhline(y=0,linewidth = 0.5)
B.axhline(y=0,linewidth = 0.5)


###rectangulos
##aqui de nuevo hay dependencia de la función.
q=0
r=0
for k in valores_x_min:
    rect_min_i = matplotlib.patches.Rectangle((P_1[q],0), Delta_P, k**2, color='yellow')
    A.add_patch(rect_min_i)
    q+=1
for t in valores_x_max:
    rect_max_i = matplotlib.patches.Rectangle((P_1[r],0), Delta_P, t**2, color='orange')
    B.add_patch(rect_max_i)
    r+=1

###########################################################segunda parte del código#############################################
    
fig_2, (C,D) = plt.subplots(1,2)

##se usa a y b como los límites de los intervalos del inicio del código.
##preguntar pq la norma debe ser menor a la longitud de todo el intervalo.
norma_de_la_particion = 0.5
cantidad_elementos_partición = 10

x_3 = rand.uniform(a,b)

particion=[a,b,x_3]

if norma_de_la_particion >= b-a:
    print("no vro, no puede ser lo que quieres hacer jeje")
elif norma_de_la_particion <= b-a and norma_de_la_particion <= b-x_3 and norma_de_la_particion <= x_3-a:
    decision_1 = rand.choice([True, False])
    if decision_1 == True:
        x_4 = x_3 + norma_de_la_particion
        particion.append(x_4)
    elif decision_1 == False:
        x_4 = x_3 - norma_de_la_particion
        particion.append(x_4)
elif norma_de_la_particion <= b-a and norma_de_la_particion >= b-x_3 and norma_de_la_particion <= x_3-a:
    x_4 = x_3 - norma_de_la_particion
    particion.append(x_4)
elif norma_de_la_particion <= b-a and norma_de_la_particion <= b-x_3 and norma_de_la_particion >= x_3-a:
    x_4 = x_3 + norma_de_la_particion
    particion.append(x_4)
print(particion)
elementos_que_restan_de_la_particion = cantidad_elementos_partición-4

for i in range(elementos_que_restan_de_la_particion):
    decision_2 = rand.choice([True, False])
    if x_4 <= x_3: 
        if decision_2 == True:
            x_i = rand.uniform(x_3,b)
            particion.append(x_i)
        elif decision_2 == False:
            x_i = rand.uniform(a,x_4)
            particion.append(x_i)
    elif x_4 >= x_3:
        if decision_2 == True:
            x_i = rand.uniform(x_4,b)
            particion.append(x_i)
        elif decision_2 == False:
            x_i = rand.uniform(a,x_3)
            particion.append(x_i)

particion.sort()

elementos_de_Riemann=[]
print(len(particion))
for i in range(cantidad_elementos_partición-1):
    r_i = rand.uniform(particion[i],particion[i+1])
    elementos_de_Riemann.append(r_i)
    
######dibujo de las sumas.

Cero_1=[]
for i in range(cantidad_elementos_partición):
    Cero_1.append(0)
    
Cero_2=[]
for i in range(len(elementos_de_Riemann)):
    Cero_2.append(0)
    
Z=np.arange(a,b,0.01)
W=[np.sin(x**2) for x in Z]

C.plot(Z,W)
D.plot(Z,W)



ñ=0
o=0

for k in elementos_de_Riemann:
    rect_riemann_i = matplotlib.patches.Rectangle((particion[ñ],0), particion[ñ+1]-particion[ñ] , np.sin(k**2), color='chartreuse', ec = 'black')
    C.vlines(k,ymin = 0, ymax = np.sin(k**2), linewidth = 0.6, color = 'black')
    C.add_patch(rect_riemann_i)
    ñ+=1
for k in elementos_de_Riemann:
    rect_riemann_i = matplotlib.patches.Rectangle((particion[o],0), particion[o+1]-particion[o] , np.sin(k**2), color='chartreuse')
    D.add_patch(rect_riemann_i)
    o+=1

C.scatter(particion, Cero_1, c='red',marker='.',linewidth = 0.1)
D.scatter(particion, Cero_1, c='red',marker='.',linewidth = 0.1)

C.scatter(elementos_de_Riemann, Cero_2, c='blue',marker='.',linewidth = 1)
D.scatter(elementos_de_Riemann, Cero_2, c='blue',marker='.',linewidth = 1)



